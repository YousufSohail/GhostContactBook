package com.yousufsohail.ghostcontactbook.dal;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "USER_BEAN".
 */
public class UserBeanDao extends AbstractDao<UserBean, Long> {

    public static final String TABLENAME = "USER_BEAN";

    public UserBeanDao(DaoConfig config) {
        super(config);
    }


    public UserBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TITLE\" TEXT NOT NULL ," + // 1: title
                "\"FIRST\" TEXT NOT NULL ," + // 2: first
                "\"LAST\" TEXT NOT NULL ," + // 3: last
                "\"EMAIL\" TEXT NOT NULL ," + // 4: email
                "\"DOB\" TEXT NOT NULL ," + // 5: dob
                "\"PHONE\" TEXT NOT NULL ," + // 6: phone
                "\"CELL\" TEXT NOT NULL ," + // 7: cell
                "\"THUMBNAIL_PIC\" TEXT NOT NULL ," + // 8: thumbnailPic
                "\"MEDIUM_PIC\" TEXT NOT NULL ," + // 9: mediumPic
                "\"LARGE_PIC\" TEXT NOT NULL );"); // 10: largePic
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserBean entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getTitle());
        stmt.bindString(3, entity.getFirst());
        stmt.bindString(4, entity.getLast());
        stmt.bindString(5, entity.getEmail());
        stmt.bindString(6, entity.getDob());
        stmt.bindString(7, entity.getPhone());
        stmt.bindString(8, entity.getCell());
        stmt.bindString(9, entity.getThumbnailPic());
        stmt.bindString(10, entity.getMediumPic());
        stmt.bindString(11, entity.getLargePic());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserBean entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getTitle());
        stmt.bindString(3, entity.getFirst());
        stmt.bindString(4, entity.getLast());
        stmt.bindString(5, entity.getEmail());
        stmt.bindString(6, entity.getDob());
        stmt.bindString(7, entity.getPhone());
        stmt.bindString(8, entity.getCell());
        stmt.bindString(9, entity.getThumbnailPic());
        stmt.bindString(10, entity.getMediumPic());
        stmt.bindString(11, entity.getLargePic());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    @Override
    public UserBean readEntity(Cursor cursor, int offset) {
        UserBean entity = new UserBean( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.getString(offset + 1), // title
                cursor.getString(offset + 2), // first
                cursor.getString(offset + 3), // last
                cursor.getString(offset + 4), // email
                cursor.getString(offset + 5), // dob
                cursor.getString(offset + 6), // phone
                cursor.getString(offset + 7), // cell
                cursor.getString(offset + 8), // thumbnailPic
                cursor.getString(offset + 9), // mediumPic
                cursor.getString(offset + 10) // largePic
        );
        return entity;
    }

    @Override
    public void readEntity(Cursor cursor, UserBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.getString(offset + 1));
        entity.setFirst(cursor.getString(offset + 2));
        entity.setLast(cursor.getString(offset + 3));
        entity.setEmail(cursor.getString(offset + 4));
        entity.setDob(cursor.getString(offset + 5));
        entity.setPhone(cursor.getString(offset + 6));
        entity.setCell(cursor.getString(offset + 7));
        entity.setThumbnailPic(cursor.getString(offset + 8));
        entity.setMediumPic(cursor.getString(offset + 9));
        entity.setLargePic(cursor.getString(offset + 10));
    }

    @Override
    protected final Long updateKeyAfterInsert(UserBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    @Override
    public Long getKey(UserBean entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }

    /**
     * Properties of entity UserBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property First = new Property(2, String.class, "first", false, "FIRST");
        public final static Property Last = new Property(3, String.class, "last", false, "LAST");
        public final static Property Email = new Property(4, String.class, "email", false, "EMAIL");
        public final static Property Dob = new Property(5, String.class, "dob", false, "DOB");
        public final static Property Phone = new Property(6, String.class, "phone", false, "PHONE");
        public final static Property Cell = new Property(7, String.class, "cell", false, "CELL");
        public final static Property ThumbnailPic = new Property(8, String.class, "thumbnailPic", false, "THUMBNAIL_PIC");
        public final static Property MediumPic = new Property(9, String.class, "mediumPic", false, "MEDIUM_PIC");
        public final static Property LargePic = new Property(10, String.class, "largePic", false, "LARGE_PIC");
    }

}
